name: Final Release Validation

on:
  push:
    branches:
      - main
      - release/*
    tags:
      - 'v*'

jobs:
  sast:
    name: SAST - Semgrep
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: returntocorp/semgrep-action@v1
        with:
          config: 'auto'
  
  sca:
    name: SCA - Dependency Scanning
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Install dependencies
        run: npm install  # or pip install -r requirements.txt, etc.
      - name: Run Snyk
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          command: test

  secrets-scan:
    name: Secrets Scanning
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: trufflesecurity/trufflehog@v3

  iac-scan:
    name: IaC Scanning
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Run Checkov
        uses: bridgecrewio/checkov-action@master

  license-scan:
    name: License Compliance
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: fsfe/reuse-action@v1  # or use FOSSA or Snyk license tools

  dast:
    name: DAST Scan
    runs-on: ubuntu-latest
    needs: [sast, sca, secrets-scan]
    steps:
      - name: Deploy to temporary test env
        run: ./scripts/deploy-to-staging.sh
      - name: Run OWASP ZAP
        uses: zaproxy/action-full-scan@v0.7.0
        with:
          target: 'https://staging.example.com'

  verify-provenance:
    name: Provenance & Tag Verification
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Verify Git Tag
        run: |
          if ! git describe --tags --exact-match; then
            echo "This is not a tagged release. Exiting."
            exit 1
          fi
      - name: Validate source and commit (if using SLSA)
        run: |
          slsa-verifier \
            --provenance-path provenance.json \
            --source-uri https://github.com/yourorg/yourrepo \
            --commit $(git rev-parse HEAD)

  deploy:
    name: Manual Production Deployment
    runs-on: ubuntu-latest
    needs: [sast, sca, secrets-scan, iac-scan, license-scan, dast, verify-provenance]
    if: github.ref_type == 'tag' || startsWith(github.ref, 'refs/heads/release/')
    steps:
      - name: Wait for manual approval
        uses: trstringer/manual-approval@v1
        with:
          secret: ${{ secrets.GITHUB_TOKEN }}
          approvers: 'you@example.com,manager@example.com'
      - name: Deploy to Production
        run: ./scripts/deploy-to-prod.sh
